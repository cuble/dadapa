1. To ignore generated files added to the git repo
  - add files you want to ignore into .gitignore in the repo

2. To do automatic compile after commit
  - To detect if src file changed

3. To check the change in GUI
  - gitk [file]

4. There are three level git config values: /etc/gitconfig, ~/.gitconfig, ./.git/config

5. git log --pretty=format:"options", options as following:
    %H  Commit hash
    %h  Abbreviated commit hash
    %T  Tree hash
    %t  Abbreviated tree hash
    %P  Parent hashes
    %p  Abbreviated parent hashes
    %an Author name
    %ae Author e-mail
    %ad Author date (format respects the â€“date= option)
    %ar Author date, relative
    %cn Committer name
    %ce Committer email
    %cd Committer date
    %cr Committer date, relative
    %s  Subject
  filter options for git log:
    --since, --after, --util, --before,  --author, --committer, --grep(used to grep commit message), -(n) (show only last n commits)
	--all-match, this option is needed in some condition to make filter by all given conditions
	file name or path can be given to filter logs that contain the selected files change information. '--' is used to split files or path from options
	example: git log --since=2012-10-1 --before=2013-10-1 -- README
	
6. git remote:
  - git remote -v
  - git remote add [name] [url]
  - git remote show [name], show branch information of remote and related configuration locally
  - git remote rename [orgName] [newName], git remote rm [name]
  
7. git tag
  - git tag -l 'v1.4.2.*', used to list all the tags start with v1.4.2.
  - git tag -a [tagName] -m [message], to add a annotated tag. git tag -a [tagName] -m [message] [commitChecksum] can be used to tag a old commit.
  - git tag -s [tagName] -m [message], to add a signed tag, which can be verified by 'git tag -v [tagName]'
  - git tag [tagName], create a lightweight tag which create a file referred to the commit checksum.
  - git push origin [tagName], to push the tag to origin server. git push origin --tags to push all tags to origin server.
  
8. tips:
  - make auto completion work for git: source git-completion.bash. 'git-completion.bash' located in git source code's contrib/completion. add the command into .bashrc to make it auto configured. Or copy it to /etc/bash_completion.d/ to make it auto configured for all uses.
  - git config --global alias.visual '!gitk', to make 'git visual' load external command 'gitk'.

9. work with branch
  - git checkout -b issuexx, create a new branch named issuexx from HEAD and checkout it
    - git checkout -b issuexx origin/issuexx, to create local issuexx branch base on remote issuexx and check it out
	  - git checkout --track origin/issuexx, the same as up command
  - git branch issueyy, create a branch named issueyy from HEAD
    - git branch, show all branchs 
	- git branch -v, show HEAD information of all branchs
	- git branch --merged(--no-merged), to filter branches concerning whether the content of the branch merged to current branch(master)
  - git merge issueyy, merge branch issueyy into current HEAD
  - git mergetool, to laugch visule merge tool when conflict found after merge
  - git branch -d [branchName], to delete a branch
    - git branch -D [branchName], to force delete a branch, which not one of the ancestor of the HEAD(not merged yet)
  - git push [remoteName] [branchName], to push local branch to remote
    - git push [remoteName] [localBranch]:[remoteBranch], to push local branch to remote and reset name
    - git push [remoteName] :[branchName], to remove a remote branch
